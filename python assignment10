import random
import math
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

# Function to list all prime numbers from 1 to 100 using Sieve of Eratosthenes
def sieve_of_eratosthenes(limit):
    primes = [True] * (limit + 1)
    p = 2
    while (p * p <= limit):
        if primes[p]:
            for i in range(p * p, limit + 1, p):
                primes[i] = False
        p += 1
    return [p for p in range(2, limit + 1) if primes[p]]

# Function to generate RSA keys using built-in functions
def rsa_with_builtin():
    # Key generation
    key = RSA.generate(2048)
    private_key = key.export_key()
    public_key = key.publickey().export_key()

    # Encryption
    message = b'Hello, this is a secret message!'
    cipher_rsa = PKCS1_OAEP.new(key.publickey())
    ciphertext = cipher_rsa.encrypt(message)

    # Decryption
    cipher_rsa = PKCS1_OAEP.new(key)
    decrypted_message = cipher_rsa.decrypt(ciphertext)

    return ciphertext, decrypted_message.decode()

# Function to implement RSA algorithm without using built-in functions
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def mod_inverse(e, phi):
    d_old, d_new = 0, 1
    r_old, r_new = phi, e
    
    while r_new != 0:
        quotient = r_old // r_new
        d_old, d_new = d_new, d_old - quotient * d_new
        r_old, r_new = r_new, r_old - quotient * r_new
    
    if r_old > 1:
        raise Exception('No modular inverse')
    
    if d_old < 0:
        d_old += phi
    
    return d_old

def generate_prime_candidate(length):
    p = random.getrandbits(length)
    return p | (1 << length - 1) | 1

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def generate_prime_number(length):
    p = 4
    while not is_prime(p):
        p = generate_prime_candidate(length)
    return p

def rsa_without_builtin(bits=1024):
    p = generate_prime_number(bits // 2)
    q = generate_prime_number(bits // 2)
    
    n = p * q
    phi = (p - 1) * (q - 1)

    e = 65537 # Common choice for e
    if gcd(e, phi) != 1:
        raise Exception('e and phi are not coprime')

    d = mod_inverse(e, phi)

    return ((e, n), (d, n)) # public and private keys

def encrypt(public_key, plaintext):
    e, n = public_key
    ciphertext = pow(plaintext, e, n)
    return ciphertext

def decrypt(private_key, ciphertext):
    d, n = private_key
    plaintext = pow(ciphertext, d)
